library(nlme)
library(retrosheet)

ALfinal <- read.table('2009AL.txt', header=T)
NLfinal <- read.table('2009NL.txt', header=T)
ALfinal$Lg <- "AL"
NLfinal$Lg <- "NL"
final <- rbind(ALfinal, NLfinal)
# sort team according to wins
final <- final[order(final$W, decreasing=TRUE), ]
# assign initial rank centered at 0 with random errors
set.seed(20160806)
final$str <- 14.5:-14.5 + rnorm(length(final$Tm), 0, 3)
# sort team according to team name
ALfinal <- final[final$Lg == 'AL', ]
NLfinal <- final[final$Lg == 'NL', ]
ALfinal <- ALfinal[order(ALfinal$Tm), ]
NLfinal <- NLfinal[order(NLfinal$Tm), ]
ind <- grep("MIA", NLfinal$Tm)
NLfinal[length(NLfinal$Tm) + 1, ] <- NLfinal[ind, ]
NLfinal <- NLfinal[-ind, ]
# x-hat0
x0 <- rbind(ALfinal, NLfinal)$str
n <- length(final$Tm)
# sigma-hat0
sigma0 <- sd(x0)
Sig0 <- sigma0*diag(length(teamIds))
sigV <- 1
M <- sigV*diag(n)
sigW <- 1


pars <- rep(1,35)

# recursive function to calculate sigma
# equation 9 of paper
#Predictive cov matrix, Sigma_t+1|t
sigma_pred <- function(t, season, param){
  sigma_post(t - 1, season, param)
}

# equation 10 of paper
# Posterior cov matrix, Sigma_t+1|t+1 
sigma_post <- function(t, season, param){
  Sig0 <- param[1]*diag(30) # Sigma_0
  sigV <- param[2] # sigma_V
  sigW <- param[3] # sigma_W
  # u <- param[4:35] # coefficients of covariates
  M <- sigV*diag(30) # cov matrix of v
  if(t > 0){
    Ct <- as.matrix(getC(t, season)) # C_t
    mt <- nrow(Ct)  # m: number of games on day t
    Nt <- sigW*diag(mt) # cov matrix of w
    sprev <- sigma_pred(t, season, param)
    return(sprev - 
             sprev%*%t(Ct)%*%
             solve(Ct%*%sprev%*%t(Ct) + Nt)%*%
             Ct%*%sprev)
  }
  else{
    Sig0 + M
  }
}




## test ##
# first game of 2010
sigma_pred(1, 1, pars) # Sig_hat_1|0 = Sig_pred_0|0 + M = Sig0 + M
# second game of 2010
sigma_pred(2, 1, pars) # Sig_hat_2|1
# third game of 2010
sigma_pred(3, 1, pars) # Sig_hat_3|2

sigma_post(3, 1, pars) # Sig_hat_3|3


# recurssive function to calculate x
# 2.2.4 (ii) of paper
# prediction of system states
x_pred <- function(t, season, param){
    x_post(t - 1, season, param)
}
u <- matrix(rep(1, 32), ncol=1)
# equation 11 of paper
# posterior estimate of system states
# u is the coeffcients of the covariates
x_post <- function(t, season, param){
  if(t > 1){
    Sig0 <- param[1]*diag(30) # Sigma_0
    sigV <- param[2] # sigma_V
    sigW <- param[3] # sigma_W
    u <- param[4:35] # ut
    Ct <- as.matrix(getC(t, season)) # C_t
    Dt <- as.matrix(getD(t, season)) # D_t
    mt <- nrow(Ct)  # m: number of games on day t
    # Nt <- sigW*diag(mt) # cov matrix of w
    # M <- sigV*diag(n) # cov matrix of v
    xprev <- x_post(t - 1, season, param) # X-hat_t-1 | t-1
    sigpost <- sigma_post(t, season, param) # Sigma-hat_t | t
    yt <- as.matrix(gety(t, season)) # y_t, point differentials on games in t-th game day
    return(xprev + (1/sigW)*sigpost%*%t(Ct)%*%(yt - Ct%*%xprev - Dt%*%u))
  }
  else{
    x0
  }
}

## test ##
# first game of 2010
x_post(1, 1, pars) # x_1|0 
# second game of 2010
x_post(2, 1, pars) # x_2|1
# third game of 2010
x_post(3, 1, pars) # x_3|2



# -1 times the log likelihood function (equation 21 of the paper)
# input is a 1 x 35 vector
log_like <- function(param){
  # Sig0 <- param[1]*diag(30) # Sigma_0
  # sigV <- param[2] # sigma_V
  sigW <- param[3] # sigma_W
  u <- param[4:35] # ut
  season = 1 # 2010 season
  Tot <- max(matchSeasons[[season]]$Tind) # total number of game days
  logLF <- 0
  for(i in 1:Tot){
    Ct <- as.matrix(getC(t, season)) # C_t
    Dt <- as.matrix(getD(t, season)) # D_t
    mt <- nrow(Ct)  # m: number of games on day t
    Nt <- sigW*diag(mt) # N
    yt <- as.matrix(gety(t, season)) # y_t, point differentials on games in t-th game day
    yhat_t <- Ct%*%x_pred(t, season, param) + Dt%*%u # 2.3.1 of paper
    Ohat_t <- Ct%*%sigma_pred(t, season, param)%*%t(Ct) + Nt # 2.3.1 of paper
    
    # log likelihood of y_t given y_t-1, equantion 21 of the paper
    logLF_t <- -(1/2)*log(det(Ohat_t)) - (1/2)*(t(yt - yhat_t)%*%solve(Ohat_t)%*%(yt - yhat_t))
    logLF <- logLF + logLF_t
  }
  return(-logLF)
}

# test
log_like(pars)

# ML estimate of the parameters
ml <- nlm(f=log_like, p=pars)
